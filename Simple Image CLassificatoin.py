# -*- coding: utf-8 -*-
"""Transfer Learning intro

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1840wR8Mc7g20KhiyPeCGbwW8n3DaIpPe
"""

import numpy as np
from PIL import Image
import cv2
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from keras.applications.resnet50 import ResNet50, preprocess_input
from keras.layers import Dense, Activation, Flatten, Dropout
from keras.models import Sequential
from keras.utils import np_utils
from google.colab import files





from google.colab import drive
drive.mount('/content/gdrive')

!ls

!ls gdrive/

!ls gdrive/My\ Drive

!ls gdrive/My\ Drive/data_set

!ls data_set

!ls cat

dict_labels={
    'cats':0,
    'dogs':1,
    'horses':2,
    'Humans':3
}

!ls ./data_set

path='gdrive/My Drive/data_set/'
import os

x_, y_ = [],[]
classes= os.listdir( path )
for img_folder in classes:
  img_path = path + img_folder
  images = os.listdir( img_path )
  for img in images:
    x = Image.open( img_path + '/' + img)
    x = x.resize( ( 224 , 224 ))
    x = np.array(x , dtype = np.float32)

    x_.append(x)
    y_.append(dict_labels[img_folder])
    
X = np.array(x_)
Y = np.array(y_)
print(X.shape)
print(Y.shape)

print(type(X[3]))

X = preprocess_input(X)

print(type(X[3]))

Y = np_utils.to_categorical(Y)
print(Y.shape)

X, Y = shuffle(X, Y)



X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 0.2 )

print(X_train.shape,  X_test.shape, Y_train.shape, Y_test.shape)

resnet_model = ResNet50( input_shape = (224,224,3) , include_top = False, weights = 'imagenet' )

for ix in resnet_model.layers:
  ix.trainable = False

fc_layers = Sequential()
fc_layers.add( Flatten( input_shape = resnet_model.layers[-1].output_shape[1:] ) )
fc_layers.add( Dense(128, activation = 'relu') )
fc_layers.add( Dropout(0.4) )
fc_layers.add( Dense(4, activation = 'softmax') )

fc_layers.summary()

final_model = Sequential( [resnet_model , fc_layers] )
final_model.summary()

final_model.compile( optimizer = 'adam' , loss = 'categorical_crossentropy' , metrics = ['accuracy'])

final_model.fit( X_train, Y_train, batch_size = 16, epochs = 5, validation_data = [X_test, Y_test], shuffle = True)

# final_model.save('model.h5')

!ls



uploaded=files.upload()

cat=Image.open('horse.jpg')
import matplotlib.pyplot as plt

plt.imshow(cat)

r = np.random.randint(1,160)

test_image = Image.open('horse.jpg')
test_image = test_image.resize((224,224))
test_image = np.array(test_image,dtype = np.float32)

ti=test_image
prediction = final_model.predict(np.array([test_image]))
print(prediction)

pred = prediction[0]
ans = pred.argmax()
if(ans == 0):
  print("CAT")
elif(ans == 1):
  print("DOG")
elif(ans == 2):
  print("HORSE")
elif(ans ==3):
  print("HUMAN")















